=======
Context
=======

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

The MongoDB Go Driver uses the **context package** from Go's standard
library. 

The context package consists of the ``Context`` and ``CancelFunc``
types. The Go Driver uses the both types to simplify the process of
creating timeout or cancellation tokens for an operation in a blocking
function. A blocking function is a function that relies on an event,
such as an input or output, to proceed with its task.

Expiration
----------

The driver considers a context expired when an operation exceeds its
timeout or is canceled. The driver checks the context expiration with
the ``Done()`` function of the ``Context`` type. 

The context is not expired if the function returns a closed channel and
a timestamp that indicates when the function will cancel the completed
work. The context is expired if the function returns an open channel
that you can read from. 

The following sections describe when and how the driver checks for
expiration. 

Server Selection
~~~~~~~~~~~~~~~~

The driver might block you if it can't select a server for an operation.

In this scenario, the driver loops until it finds a server to use for the
operation. After each iteration, the driver returns a server selection
timeout error if the context expired or the selection process took
longer than the ``serverSelectionTimeoutMS`` setting. 

For more information on how the driver selects a server, see the
:ref:`Server Selection Algorithm Server Manual Page
<replica-set-read-preference-behavior>`. 

Connection Checkout
~~~~~~~~~~~~~~~~~~~

After selecting a server, the driver sets a timeout for the
connection checkout process from the server’s connection pool using
context. The context returns a timeout error if you cannot retrieve a
connection before it expires.  

The following example sets the connection timeout to *3* seconds: 

.. code-block:: go
   :emphasize-lines: 2

    opts := options.Client()
    opts.SetConnectTimeout(3 * time.Second)
    client := mongo.Connect(context.TODO(), opts)

Connection Establishment 
~~~~~~~~~~~~~~~~~~~~~~~~

When the driver needs to create a new connection to execute an
operation, the context sets a timeout for the establishment process. The
driver sets the timeout to either the context expiration or connection
timeout, whichever is shorter. 

The following example sets the connection timeout to *1* second and the
context deadline to *2* seconds. Because the connection timeout is
shorter, the establishment process expires after *1* second.

.. code-block:: go
   :emphasize-lines: 2, 4

    opts := options.Client()
    opts.SetConnectTimeout(1 * time.Second)
    client := mongo.Connect(context.TODO(), opts)
    ctx := context.WithDeadline(2 * time.Second)

    client.Database("<db>").Collection("<collection>").InsertOne(ctx, bson.D{{"x",1}})
    
Socket Read and Write
~~~~~~~~~~~~~~~~~~~~~

When the driver retrieves a connection for an operation, it sets the
socket’s read or write deadline to either the context deadline or socket
timeout, whichever is shorter.

.. important:: 

    If you cancel the context after the execution of the ``Read()`` or
    ``Write()`` function but before its deadline, the behavior of the driver
    differs based on version. 

For versions prior to 1.5.0, the driver doesn't detect the context
cancellation and waits for the ``Read()`` or ``Write()`` function to
return. 

In versions 1.5.0 and later, the driver generates a separate
goroutine to listen for context cancellation when the ``Read()`` or
``Write()`` function is in progress. If the goroutine detects a
cancellation, it closes the connection. The pending ``Read()`` or
``Write()`` function returns an error the driver overwrites to
the ``context.Canceled`` property. 

Additional Information
----------------------

For more information about the context package, see the `Go
documentation <https://pkg.go.dev/context>`__.
