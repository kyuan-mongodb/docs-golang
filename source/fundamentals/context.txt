=======
Context
=======

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how the MongoDB Go Driver uses the
**context package** from Go's standard library. 

The context package consists of the ``Context`` and ``CancelFunc``
types. The Go Driver primarily uses the ``Context`` type to simplify the
process of creating timeout or cancellation tokens for an operation in
a **blocking function**. A blocking function is a function that relies
on an event, such as an input or output, to proceed with its task.

Expiration
----------

The driver considers a context expired when it exceeds its timeout or
cancellation. It checks the context expiration with the ``Done()``
function of the ``Context`` type. The ``Done()`` function returns a
closed channel and when the function should cancel the work completed.
If you can successfully read from the channel, then the context expired.

The following sections show when and how the driver checks for
expiration. 

Server Selection
~~~~~~~~~~~~~~~~

When selecting a server for an operation, the driver may block if you
cannot select a server. 

The driver loops until it finds a server to use for the operation. After
each iteration, the driver returns a server selection timeout error if
the context expired or the selection process took longer than the
``serverSelectionTimeoutMS`` setting. 

For more information on how the driver selects a server, see the
:manual:`Server Selection Algorithm Server Manual Page </core/read-preference-mechanics/>`.

Connection Checkout
~~~~~~~~~~~~~~~~~~~

After selecting a server, the driver sets a timeout for the
connection checkout process from the server’s connection pool using
the context. If you cannot retrieve a connection before the context
expires, the context returns an error.  

The following example sets the connection timeout to *3* seconds: 

.. code-block:: go
   :emphasize-lines: 2

    opts := options.Client()
    opts.SetConnectTimeout(3 * time.Second)
    client := mongo.Connect(context.TODO(), opts)

Connection Establishment 
~~~~~~~~~~~~~~~~~~~~~~~~

When the driver needs to create a new connection to execute an
operation, the context sets a timeout for the establishment process.

The driver sets the network connection and the TLS handshake to either
the context expiration or connection timeout, whichever is shorter.

The following example sets the connection timeout to *1* second and the
context deadline to *2* seconds. Because the connection timeout is
shorter, the driver expires after *1* second when establishing a
connection to perform the insert operation.

.. code-block:: go
   :emphasize-lines: 2, 4

    opts := options.Client()
    opts.SetConnectTimeout(1 * time.Second)
    client := mongo.Connect(context.TODO(), opts)
    ctx := context.WithDeadline(2 * time.Second)

    client.Database("<db>").Collection("<collection>").InsertOne(ctx, bson.D{{"x",1}})
    
Socket Read and Write
~~~~~~~~~~~~~~~~~~~~~

When the driver retrieves a connection for the operation, it sets the
socket’s read or write deadline to either the context deadline or socket
timeout, whichever is shorter.

If you cancel the context after the execution of the ``Read()`` or
``Write()`` function but before its deadline, the behavior of the driver
differs based on version. 

.. important:: 

    For versions prior to 1.5.0, the driver won’t detect the context
    cancellation and waits for the ``Read()`` or ``Write()`` function to
    return graceful. 

    In versions 1.5.0 and later, the driver generates a separate
    goroutine to listen for context cancellation when the ``Read()`` or
    ``Write()`` function is in progress. If the goroutine detects a
    cancellation, it closes the connection. The pending ``Read()`` or
    ``Write()`` function returns with an error that is overwritten to
    the ``context.Canceled`` property by the driver. 

Additional Information
----------------------

For more information about the context package, see the `official go
documentation on the context package <https://pkg.go.dev/context>`__.
