=======
Context
=======

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to use the **context package**.

The context package simplifies the process for carrying deadlines,
cancellation signals, and request-scoped values across API boundaries
and between processes. 

The package consists of the ``Context`` and ``CancelFunc`` types. 

Context
-------

The ``Context`` type implements the following functions:

- ``Deadline()`` which returns the time that the function should cancel the work completed
- ``Done()`` which returns a closed channel and when the function should cancel the work completed
- ``Err()`` which returns an explanation of the error if any exist
- ``Value()`` which returns the value associated with the ``Context`` key

The following sections show the ways to create a new ``Context`` type
and their use cases. Each function returns a copy of the ``Context``
type and stores it in a variable called ``ctx``.

Background
~~~~~~~~~~

The ``Background()`` function returns a non-nil, empty ``Context``. 
This function is never canceled, has no values, and has no deadline. 

.. code-block:: go

    ctx := context.Background()

Use Case: The top-level ``Context`` for incoming requests in the main
function, initialization, and tests.  

TODO
~~~~

The ``TODO()`` function returns a non-nil, empty ``Context``. 
This function allows you to use static analysis tools to validate whether
you're properly passing ``Context``.

.. code-block:: go

    ctx := context.TODO()

Use Case: When you are unclear which ``Context`` to use or it's not yet
available.

WithValue
~~~~~~~~~

The ``WithValue()`` function returns a copy of parent ``Context`` with
the value associated with ``key`` as "val":

.. code-block:: go

    ctx := context.WithValue(context.Background(), key, "val")

Use Case: For request-scoped data that transits processes and APIs. This
is not for passing optional parameters to functions. 

CancelFunc
----------

The ``CancelFunc`` type allows you to perform cancellation operations.
This type abandons its work without waiting for the work to stop. You
can call multiple goroutines simultaneously, but after the first call,
nothing happens for additional ``CancelFunc`` calls.

The following sections show the ways to create a new ``Context`` type
from an existing ``Context`` type. Each function returns a copy of a
``Context`` and ``CancelFunc`` type and stores them in variables called
``ctx`` and ``cancel`` respectively.

WithCancel
~~~~~~~~~~

The ``WithCancel()`` function returns a copy of the parent ``Context``
with a new ``Done()`` channel. 

This function closes the ``Done()`` channel for whichever of the following
happens first:

- The function calls the returned ``WithCancel()`` function
- The function closes the parent context's ``Done()`` channel

.. code-block:: go

    ctx, cancel := context.WithCancel(context.Background())

Use Case: For canceling redundant requests when using multiple replicas.

WithDeadline
~~~~~~~~~~~~

The ``WithDeadline()`` function returns a copy of the parent ``Context``
with the deadline adjusted to be no later than the deadline you provide. 

If the parent's deadline is earlier, the function is semantically
equivalent to the parent's deadline. 

This function closes the ``Done()`` channel for whichever of the following
happens first:

- The deadline expires
- The function calls the returned ``WithCancel()`` function
- The function closes the parent Context's ``Done()`` channel

.. code-block:: go

    ctx, cancel := context.WithDeadline(context.Background(), time.Now().Add(<some time>))

Use Case: For setting a deadline on requests to back-end servers.

WithTimeout
~~~~~~~~~~~

The ``WithTimeout()`` function returns a ``WithDeadline()`` function call. 

.. code-block:: go 

    ctx, cancel := context.WithTimeout(ctx, <some time>)

Use Case: For setting a deadline on requests to back-end servers.

Additional Information
----------------------

For more information about the functions discussed on this page, see the
`official go documentation on the context package
<https://pkg.go.dev/context>`__.
