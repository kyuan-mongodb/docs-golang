=======
Context
=======

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how the MongoDB Go Driver uses the
**context package** from Go's standard library. 

The context package consists of the ``Context`` and ``CancelFunc``
types. The Go Driver primarily uses the ``Context`` type to simplify the
process of creating timeout and cancellation tokens for an operation. 

Expiration
----------

We consider a context expired when it exceeds its timeout or
cancellation. We check context expiration with the ``Done()`` function
of the ``Context`` type. The ``Done()`` function returns a closed
channel and when the function should cancel the work completed. If you
can successfully read from the channel, then the context expired.

The following sections show when and how we check for expiration.

Server Selection
~~~~~~~~~~~~~~~~

When selecting a server for an operation, the driver may block if you
cannot select a server.

The driver loops until it finds a server to use for the operation. After
each iteration, the driver returns a server selection timeout error if
the context expired or the selection process took longer than the
``serverSelectionTimeoutMS`` setting. 

.. code-block:: go

    <some code>

Connection Establishment 
~~~~~~~~~~~~~~~~~~~~~~~~

When the driver needs to create a new connection to execute an
operation, the context contains a timeout for the establishment process.

.. code-block:: go

    <some code>

Connection Checkout
~~~~~~~~~~~~~~~~~~~

After selecting a server, the driver contains a timeout for the
connection checkout process from the server’s connection pool using
the context. 

If you cannot retrieve a connection before the context expires, the
context returns an error.  

.. code-block:: go

    <some code>

Socket Read and Write
~~~~~~~~~~~~~~~~~~~~~

When the driver retrieves a connection for the operation, it sets the
socket’s read or write deadline whichever of the following is less:

.. code-block:: go

    min(time.Now() + contextDeadline, time.Now() + socketTimeoutMS)

If you cancel the context after the execution of the ``Read()`` or
``Write()`` function but before its deadline, the behavior of the driver
differs based on version. 

.. code-block:: go

    <some code>

.. important:: 

    For versions prior to 1.5.0, the driver won’t detect the context
    cancellation and waits for the ``Read()`` or ``Write()`` function to
    return graceful. 

    In the later versions, the driver generates a separate goroutine to
    listen for context cancellation when the ``Read()`` or ``Write()``
    function is in progress. If the goroutine detects a cancellation, it
    closes the connection. The pending ``Read()`` or ``Write()``
    function returns with an error that is overwritten to the
    ``context.Canceled`` property by the driver. 

Additional Information
----------------------

For more information about the context package, see the `official go
documentation on the context package <https://pkg.go.dev/context>`__.
