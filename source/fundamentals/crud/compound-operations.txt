===================
Compound Operations
===================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Overview
--------

In this guide, you can learn how to perform **compound operations**.

Compound operations combine a read and write operation into
a single operation.  If you perform a read and write operation
separately, there's a chance someone else may alter the document between
both operations. MongoDB prevents this by placing a write lock on the
document you are modifying for the duration of your compound operation.

MongoDB supports the following compound operations:

- :ref:`Find and delete one document <go-find-and-delete>`
- :ref:`Find and update one document <go-find-and-update>`
- :ref:`Find and replace one document <go-find-and-replace>`

.. tip::
    
   If you need to read and write to more than one document, use
   :manual:`transactions </core/transactions/>`.

Sample Data
~~~~~~~~~~~

Run the following snippet to load the documents into the ``ratings``
collection of the ``tea`` database:

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/compoundOperations.go
   :language: go
   :dedent:
   :start-after: begin insertDocs
   :end-before: end insertDocs

.. include:: /includes/fundamentals/tea-sample-data-ending.rst

.. _go-find-and-delete:

Find and Delete
---------------

The ``FindOneAndDelete()`` function finds the first document that matches
the specified query filter and deletes it. The function returns a
``SingleResult`` containing the deleted document.

.. note:: 

   This function differs from the ``DeleteOne()`` function.
   ``FindOneAndDelete()`` performs a find and delete as a single
   operation, and eliminates the possibility of someone altering a
   document between both operations.

Modify Behavior
~~~~~~~~~~~~~~~

You can modify the behavior of the ``FindOneAndDelete()`` function by
passing in a ``FineOneAndDeleteOptions``. If you don't specify a
``FineOneAndDeleteOptions``, the driver uses the default values for each
option.

The ``FineOneAndDeleteOptions`` type allows you to configure options
with the following functions:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Function
     - Description

   * - ``SetCollation()``
     - | The type of language collation to use when sorting results.
       | Default: ``nil``

   * - ``SetMaxTime()``
     - | The maximum amount of time that the query can run on the server.
       | Default: ``nil``

   * - ``SetProjection()``
     - | The fields to include in the document returned.
       | Default: ``nil``

   * - ``SetSort()``
     - | The sort fields and directions to order the documents matched. 
       | Default: ``nil``

   * - ``SetHint()``
     - | The index to use to scan for documents.
       | Default: ``nil``

Example
```````

The following example matches and deletes a document where the ``type``
is "Assam" with the ``FindOneAndDelete()`` function:

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/compoundOperations.go
   :language: go
   :dedent:
   :start-after: begin FindOneAndDelete
   :end-before: end FindOneAndDelete

After running this example, the output resembles the following:

.. code-block:: none
   :copyable: false

   [{_id ObjectID("...")} {type Assam} {rating 5}]

.. _go-find-and-update:

Find and Update
---------------

The ``FindOneAndUpdate()`` function finds the first document that matches
the specified query filter and updates it according to the update
document. The function returns a ``SingleResult`` containing the matched
document.

.. note:: 

   This function differs from the ``UpdateOne()`` function.
   ``FindOneAndUpdate()`` performs a find and update as a single
   operation, and eliminates the possibility of someone altering a
   document between both operations.

Modify Behavior
~~~~~~~~~~~~~~~

You can modify the behavior of the ``FindOneAndUpdate()`` function by
passing in a ``FineOneAndUpdateOptions``. If you don't specify a
``FineOneAndUpdateOptions``, the driver uses the default values for each
option.

The ``FineOneAndUpdateOptions`` type allows you to configure options
with the following functions:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Function
     - Description

   * - ``SetArrayFilters()``
     - | The array elements the update applies to.
       | Default: ``nil``

   * - ``SetBypassDocumentValidation()``
     - | Whether to allow the write operation to opt-out of :manual:`document level validation </core/schema-validation>`.
       | Default: ``false``

   * - ``SetCollation()``
     - | The type of language collation to use when sorting results.
       | Default: ``nil``
       
   * - ``SetMaxTime()``
     - | The maximum amount of time that the query can run on the server.
       | Default: ``nil``

   * - ``SetProjection()``
     - | The fields to include in the document returned.
       | Default: ``nil``

   * - ``SetReturnDocument()``
     - | Whether to return the original or updated document in the ``SingleResult``. 
       | Default: ``options.Before``

   * - ``SetSort()``
     - | The sort fields and directions to order the documents matched. 
       | Default: ``nil``

   * - ``SetUpsert()``
     - | Whether to insert a new document if the query filter doesn't match any documents. 
       | Default: ``false``

   * - ``SetHint()``
     - | The index to use to scan for documents.
       | Default: ``nil``

Example
```````

The following example performs the following actions in order with the
``FindOneAndUpdate()`` function:

- Matches a document where the ``type`` is "Oolong"
- Updates the matched document's ``rating`` to ``9``
- Returns the updated document

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/compoundOperations.go
   :language: go
   :dedent:
   :start-after: begin FindOneAndUpdate
   :end-before: end FindOneAndUpdate

After running this example, the output resembles the following:

.. code-block:: none
   :copyable: false

   [{_id ObjectID("...")} {type Oolong} {rating 9}]

.. _go-find-and-replace:

Find and Replace
----------------

The ``FindOneAndReplace()`` function finds the first document that
matches the specified query filter and replaces it with the replacement
document. The function returns a ``SingleResult`` containing the matched
document.

.. note:: 

   This function differs from the ``ReplaceOne()`` function.
   ``FindOneAndReplace()`` performs a find and replace as a single
   operation, and eliminates the possibility of someone altering a
   document between both operations.

Modify Behavior
~~~~~~~~~~~~~~~

You can modify the behavior of the ``FindOneAndReplace()`` function by
passing in a ``FineOneAndReplaceOptions``. If you don't specify a
``FineOneAndReplaceOptions``, the driver uses the default values for each
option.

The ``FineOneAndReplaceOptions`` type allows you to configure options
with the following functions:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Function
     - Description

   * - ``SetBypassDocumentValidation()``
     - | Whether to allow the write operation to opt-out of :manual:`document level validation </core/schema-validation>`.
       | Default: ``false``

   * - ``SetCollation()``
     - | The type of language collation to use when sorting results.
       | Default: ``nil``
       
   * - ``SetMaxTime()``
     - | The maximum amount of time that the query can run on the server.
       | Default: ``nil``

   * - ``SetProjection()``
     - | The fields to include in the document returned.
       | Default: ``nil``

   * - ``SetReturnDocument()``
     - | Whether to return the original or replaced document in the ``SingleResult``. 
       | Default: ``nil``

   * - ``SetSort()``
     - | The sort fields and directions to order the documents matched. 
       | Default: ``nil``

   * - ``SetUpsert()``
     - | Whether to insert a new document if the query filter doesn't match any documents. 
       | Default: ``false``

   * - ``SetHint()``
     - | The index to use to scan for documents.
       | Default: ``nil``

Example
```````

The following example performs the following actions in order with the
``FindOneAndReplace()`` function:

- Matches a document where the ``type`` is "English Breakfast"
- Replaces the matched document with a new document where the ``type`` is "Ceylon" and  ``rating`` is ``6``

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/compoundOperations.go
   :language: go
   :dedent:
   :start-after: begin FindOneAndReplace
   :end-before: end FindOneAndReplace

After running this example, the output resembles the following:

.. code-block:: none
   :copyable: false

   [{_id ObjectID("...")} {type English Breakfast} {rating 5}]

Additional Information
----------------------

For more information on performing the operations mentioned, see the
following guides:

- :doc:`Specify a Query </fundamentals/crud/query-document>`
- :doc:`Retrieve Data </fundamentals/crud/read-operations/retrieve>`
- :doc:`Delete a Document </fundamentals/crud/write-operations/delete>`
- :doc:`Update or Replace a Document </fundamentals/crud/write-operations/change-a-document>`
- :ref:`Access Data in a SingleResult <bson-unmarshalling>`

API Documentation
~~~~~~~~~~~~~~~~~

For more information on any of the functions or types discussed in this
guide, see the following API Documentation:

- `FindOneAndDelete() <{+api+}/mongo#Collection.FindOneAndDelete>`__
- `FindOneAndDeleteOptions <{+api+}/mongo/options#FindOneAndDeleteOptions>`__
- `FindOneAndUpdate() <{+api+}/mongo#Collection.FindOneAndUpdate>`__
- `FindOneAndUpdateOptions <{+api+}/mongo/options#FindOneAndUpdateOptions>`__
- `FindOneAndReplace() <{+api+}/mongo#Collection.FindOneAndReplace>`__
- `FindOneAndReplaceOptions <{+api+}/mongo/options#FindOneAndReplaceOptions>`__
