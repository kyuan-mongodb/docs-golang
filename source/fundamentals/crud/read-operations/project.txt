.. _golang-project:

==============================
Specify Which Fields to Return
==============================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to specify which fields to return in a
document from read operations.

Sample Data
~~~~~~~~~~~

To run the examples in this guide, load these documents into the
``tea.ratings`` collection with the following
snippet:

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/projection.go 
   :language: go
   :dedent:
   :start-after: begin insertDocs
   :end-before: end insertDocs

.. include:: /includes/fundamentals/tea-sample-data-ending.rst

Projection
----------

A projection specifies which fields to return in matched documents. It
contains field names followed by a ``1`` (to include) or ``0`` (to
exclude). Projections can only include or exclude fields.

You can specify a projection by passing one to the ``SetProjection()``
method in the options of the following read operation methods:

- ``Find()``
- ``FindOne()``
- ``FindOneAndDelete()``
- ``FindOneAndReplace()``
- ``FindOneAndUpdate()``

.. tip::

   If you don't specify a projection, the read operation returns all
   the fields in matched documents.

Exclude a Field
~~~~~~~~~~~~~~~

To exclude a field, pass the field you want to exclude and a ``0`` to
the ``SetProjection()`` method. For all fields you don't explicitly
list in the projection, the driver includes them.

Example
```````

The following example excludes the ``rating`` from the matched documents
from the ``Find()`` method:

.. io-code-block::
   :copyable: true

   .. input::
      :language: go

      opts := options.Find().SetProjection(bson.D{{"rating", 0}})

      cursor, err := coll.Find(context.TODO(), bson.D{}, opts)
      if err != nil {
         panic(err)
      }

      var results []bson.D
      if err = cursor.All(context.TODO(), &results); err != nil {
         panic(err)
      }
      for _, result := range results {
         fmt.Println(result)
      }

   .. output::
      :language: none
      :visible: false

      //results truncated
      [{_id ObjectID("...")} {type Masala}]
      [{_id ObjectID("...")} {type Assam}]
      [{_id ObjectID("...")} {type Oolong}]
      [{_id ObjectID("...")} {type Earl Grey}]
      [{_id ObjectID("...")} {type English Breakfast}]

Include a Field
~~~~~~~~~~~~~~~

To include a field, pass the field you want to include and a ``1`` to
the ``SetProjection()`` method. For all fields you don't explicitly
list in the projection, the driver excludes them.

.. important::

    You can exclude the ``_id`` field even if you specified to include
    certain fields. By default, the driver includes the ``_id`` field.
    You must explicitly exclude the ``_id`` field if you do not want it
    returned.

.. _golang-include-projection:

Example
```````

The following example performs the following projection on the matched
documents from the ``Find()`` method:

- Include the ``type`` and ``rating`` field
- Exclude the ``_id`` field

.. io-code-block::
   :copyable: true

   .. input::
      :language: go

      opts := options.Find().SetProjection(bson.D{{"type", 1}, {"rating", 1}, {"_id", 0}})

      cursor, err := coll.Find(context.TODO(), bson.D{}, opts)
      if err != nil {
         panic(err)
      }

      var results []bson.D
      if err = cursor.All(context.TODO(), &results); err != nil {
         panic(err)
      }
      for _, result := range results {
         fmt.Println(result)
      }

   .. output::
      :language: none
      :visible: false

      [{type Masala} {rating 10}]
      [{type Assam} {rating 5}]
      [{type Oolong} {rating 7}]
      [{type Earl Grey} {rating 8}]
      [{type English Breakfast} {rating 5}]

Aggregation
~~~~~~~~~~~

You can also include the :manual:`$project </reference/operator/aggregation/project/>`
stage to specify a projection in an aggregation pipeline.

Example
```````

The following example performs the following projection on the matched
documents from the ``Aggregate()`` method:

- Include the ``type`` and ``rating`` field
- Exclude the ``_id`` field

.. io-code-block::
   :copyable: true

   .. input::
      :language: go

      projectStage := bson.D{{"$project", bson.D{{"type", 1}, {"rating", 1}, {"_id", 0}}}}

      cursor, err := coll.Aggregate(context.TODO(), mongo.Pipeline{projectStage})
      if err != nil {
         panic(err)
      }

      var results []bson.D
      if err = cursor.All(context.TODO(), &results); err != nil {
         panic(err)
      }
      for _, result := range results {
         fmt.Println(result)
      }

   .. output::
      :language: none
      :visible: false

      [{type Masala} {rating 10}]
      [{type Assam} {rating 5}]
      [{type Oolong} {rating 7}]
      [{type Earl Grey} {rating 8}]
      [{type English Breakfast} {rating 5}]

Additional Information
----------------------

To learn more about the operations mentioned, see the following
guides:

- :ref:`golang-query-document`
- :ref:`golang-retrieve`
- :ref:`golang-compound-operations`
- :ref:`golang-aggregation`

To learn about projecting text scores from your text search, see :ref:`golang-search-text`.

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about any of the methods or types discussed in this
guide, see the following API Documentation:

- `Find() <{+api+}/mongo#Collection.Find>`__
- `FindOptions.SetProjection() <{+api+}/mongo/options#FindOptions.SetProjection>`__
- `FindOne() <{+api+}/mongo#Collection.FindOne>`__
- `FindOneAndDelete() <{+api+}/mongo#Collection.FindOneAndDelete>`__
- `FindOneAndReplace() <{+api+}/mongo#Collection.FindOneAndReplace>`__
- `FindOneAndUpdate() <{+api+}/mongo#Collection.FindOneAndUpdate>`__
- `Aggregate() <{+api+}/mongo#Collection.Aggregate>`__
