============
Sort Results
============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to specify the order of your results
from read operations.

Sample Data
~~~~~~~~~~~

To run the examples in this guide, load these documents into the
``ratings`` collection of the ``tea`` database with the following
snippet:

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/sort.go
   :language: go
   :dedent:
   :start-after: begin insertDocs
   :end-before: end insertDocs

.. tip:: Non-existent Database and Collections

   The driver automatically creates the necessary database and/or collection
   when you perform a write operation against them if they don't already exist.

Each document contains a rating for a type of tea, which corresponds to
the ``type`` and ``rating`` fields.

.. note::

   Each example truncates the ``ObjectID`` value since the driver
   generates them uniquely.

Sort Direction
--------------

To specify the order of your results, pass an interface specifying the
field and sort direction to the ``FindOptions.SetSort()`` function
as the third parameter to the ``Find()`` function.

The sort direction can be **ascending** or **descending**.

Ascending
~~~~~~~~~

An ascending sort orders your results from smallest to largest. To
specify this sort, pass the field you want to sort by and ``1`` to the
``FindOptions.SetSort()`` function.

.. tip::

   With an ascending sort, the function orders values of type
   ``Boolean`` from ``false`` *to* ``true``, ``String`` type values
   from *a to z* and numeric type values from *negative infinity to
   positive infinity*.

Example 
```````

The following example specifies an ascending sort on the ``rating`` field:

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/sort.go
   :language: go
   :dedent:
   :start-after: begin ascending sort
   :end-before: end ascending sort
   :emphasize-lines: 2-3, 5

After running the preceding example, the output resembles the following:

.. code-block:: none
   :copyable: false

    //results truncated
    [_id:ObjectID("...") rating:5 type:Assam]
    [_id:ObjectID("...") rating:5 type:English Breakfast]
    [_id:ObjectID("...") rating:7 type:Oolong]
    [_id:ObjectID("...") rating:8 type:Earl Grey]
    [_id:ObjectID("...") rating:10 type:Masala]

Descending
~~~~~~~~~~

A descending sort orders your results from largest to smallest. To
specify this sort, pass the field you want to sort by and ``-1`` to the
``FindOptions.SetSort()`` function.

.. tip::

   With an descending sort, the function orders values of type
   ``Boolean`` from ``true`` *to* ``false``, ``String`` type values
   from *z to a* and numeric type values from *positive infinity to
   negative infinity*.

Example
```````

The following example specifies a descending sort on the ``rating`` field:

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/sort.go
   :language: go
   :dedent:
   :start-after: begin descending sort
   :end-before: end descending sort
   :emphasize-lines: 2-3, 5

After running the preceding example, the output resembles the following:

.. code-block:: none
   :copyable: false

    [_id:ObjectID("...") rating:10 type:Masala]
    [_id:ObjectID("...") rating:8 type:Earl Grey]
    [_id:ObjectID("...") rating:7 type:Oolong]
    [_id:ObjectID("...") rating:5 type:Assam]
    [_id:ObjectID("...") rating:5 type:English Breakfast]

Handling Ties
~~~~~~~~~~~~~

A tie occurs when two or more documents have identical values in the
field you are using to sort your results. MongoDB does not guarantee
order if ties occur. 

For example, in the sample data, there is a tie for the ``rating`` in
the following documents:

.. code-block:: none
   :copyable: false

   [_id:ObjectID("...") rating:5 type:Assam]
   [_id:ObjectID("...") rating:5 type:English Breakfast]

To guarantee a specific order for documents when ties occur, specify
additional fields to sort by.

Example
```````

The following example specifies an ascending sort on the ``rating`` field,
then a descending sort on the ``type`` field:

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/sort.go
   :language: go
   :dedent:
   :start-after: begin multi sort
   :end-before: end multi sort
   :emphasize-lines: 2-3, 5

After running the preceding example, the output resembles the following:

.. code-block:: none
   :copyable: false

   [_id:ObjectID("...") rating:5 type:English Breakfast]
   [_id:ObjectID("...") rating:5 type:Assam]
   [_id:ObjectID("...") rating:7 type:Oolong]
   [_id:ObjectID("...") rating:8 type:Earl Grey]
   [_id:ObjectID("...") rating:10 type:Masala]

.. tip:: Using Aggregation 

   You can also specify a sort in an aggregation pipeline by including
   the :manual:`$sort </reference/operator/aggregation/sort/>` stage.

   The following example specifies the same sort from the preceding
   example in an aggregation pipeline:

   .. literalinclude:: /includes/fundamentals/code-snippets/CRUD/sort.go
      :language: go
      :dedent:
      :start-after: begin aggregate sort
      :end-before: end aggregate sort

Additional Information
----------------------

For more information on performing read operations, see our guide on
:doc:`retrieving data </fundamentals/crud/read-operations/retrieve>`.

.. For information about sorting in an aggregation pipeline, see our
.. guide on :doc:`Text Search </fundamentals/crud/write-operations/text>`.

API Documentation
~~~~~~~~~~~~~~~~~

For more information on any of the functions or types discussed in this
guide, see the following API Documentation:

- `Find() <{+api+}/mongo#Collection.Find>`__
- `FindOptions.SetSort() <{+api+}/mongo/options#FindOptions.SetSort>`__
- `Aggregate() <{+api+}/mongo#Collection.Aggregate>`__
