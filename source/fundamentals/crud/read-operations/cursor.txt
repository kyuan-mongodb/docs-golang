.. _cursor-golang:

=========================
Access Data From a Cursor
=========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to access data with a **cursor**.

A cursor is a mechanism that allows an application to iterate over
database results while holding only a subset of them in memory at a
given time. Read operations that match multiple documents use a cursor
to return those documents in batches as opposed to all at once.

Sample Cursor
~~~~~~~~~~~~~

Each section uses the following ``cursor`` variable, which is a
``Cursor`` struct that contains all the documents in a collection:

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/cursor.go
   :language: go
   :dedent:
   :start-after: begin find
   :end-before: end find

.. important::

   A cursor is not goroutine safe. Do not use the same cursor in
   multiple goroutines at the same time.

.. _individual-documents-golang:

Retrieve Documents Individually
-------------------------------

To retrieve documents from your cursor individually, use the
``Next()`` method.

This method blocks the current goroutine. That means the function
returns a document if each of the following is true:

- A document is currently or will later be available
- No errors occurred
- The ``MongoClient`` didn't exhaust the cursor
- The context didn't expire

.. include:: /includes/fundamentals/exhausted-cursor-definition.rst

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/cursor.go
   :language: go
   :dedent:
   :start-after: begin cursor next
   :end-before: end cursor next

Documents Only in the Cursor
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To attempt retrieving a document from your cursor, use the ``TryNext()``
method.

This method is unable to block the current goroutine. That means the
function returns a document if each of the following is true:

- A document is currently available
- No errors occurred
- The ``MongoClient`` didn't exhaust the cursor
- The context didn't expire

.. include:: /includes/fundamentals/exhausted-cursor-definition.rst

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/cursor.go
   :language: go
   :dedent:
   :start-after: begin cursor try next
   :end-before: end cursor try next

Retrieve All Documents
----------------------

To populate an array with all of your query results, use the ``All()``
method:

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/cursor.go
   :language: go
   :dedent:
   :start-after: begin cursor all
   :end-before: end cursor all

.. important:: Memory

   If your query retrieves a number of documents larger than the size of
   your array, this method crashes your application. If this occurs, 
   :ref:`retrieve the documents individually <individual-documents-golang>`.

Close the Cursor
----------------

When your application no longer needs to use a cursor, close the cursor
with the ``Close()`` method. This method frees up your cursor's
consumption of resources in both the client application and the 
MongoDB server.

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/cursor.go
   :language: go
   :dedent:
   :start-after: begin close
   :end-before: end close

.. note:: 

   Close the cursor when you :ref:`retrieve documents individually
   <individual-documents-golang>` because those functions make a cursor
   :manual:`tailable </core/tailable-cursors/>`.

Additional Information
----------------------

For more information on the operations discussed in this guide, see the
following guides:

- :ref:`<retrieve-golang>`
- :ref:`<query_document_golang>`
- :ref:`<bson-golang>`
- :manual:`Tailable Cursors </core/tailable-cursors/>`

.. - Fundamentals > BSON page

API Documentation
~~~~~~~~~~~~~~~~~

For more information on how to access a cursor's elements before the
cursor is exhausted, see the following API Documentation:

- `Cursor <{+api+}/mongo#Cursor>`__
- `Cursor.All() <{+api+}/mongo#Cursor.All>`__
- `Cursor.Next() <{+api+}/mongo#Cursor.Next>`__
- `Cursor.TryNext() <{+api+}/mongo#Cursor.TryNext>`__
- `Cursor.Decode() <{+api+}/mongo#Cursor.Decode>`__
- `Cursor.RemainingBatchLength() <{+api+}/mongo#Cursor.RemainingBatchLength>`__
- `Cursor.ID() <{+api+}/mongo#Cursor.ID>`__
- `Cursor.Err() <{+api+}/mongo#Cursor.Err>`__
- `Cursor.Close() <{+api+}/mongo#Cursor.Close>`__
