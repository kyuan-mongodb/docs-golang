.. _cursor-golang:

=========================
Access Data From a Cursor
=========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to access data with a **cursor**.

A cursor is a mechanism that allows an application to iterate over
database results while holding only a subset of them in memory at a
given time. Read operations that match multiple documents use a cursor
to return those documents in batches as opposed to all at once.

Sample Cursor
~~~~~~~~~~~~~

The following sections use a ``cursor`` variable, which is a cursor that
retrieved all the documents in a collection with the ``Find()`` function.

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/cursor.go
   :language: go
   :dedent:
   :start-after: begin find
   :end-before: end find

.. important::

   A cursor is not goroutine safe. Do not use the same cursor in
   multiple goroutines at the same time.

Retrieve All Documents
----------------------

To populate an array with all of your query results, use the ``All()``
method:

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/cursor.go
   :language: go
   :dedent:
   :start-after: begin cursor all
   :end-before: end cursor all

.. important:: Memory

   This method crashes your application if your query retrieves a number
   of documents larger than the size of your array. If this occurs,
   :ref:`retrieve the documents individually <individual-documents-golang>`.

.. _individual-documents-golang:

Retrieve Documents Individually
-------------------------------

To retrieve documents from your cursor individually, use the
``Next()`` method.

This method blocks the current goroutine. That means the function
returns a document if each of the following is true:

- A document is currently or will later be available
- No errors occurred
- The ``MongoClient`` didn't exhaust the cursor
- The context didn't expire

.. tip::

   Iterating through your documents individually removes the possibility
   of crashing your application and allows you to :ref:`access a cursors
   elements <cursor-elements-golang>`.

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/cursor.go
   :language: go
   :dedent:
   :start-after: begin cursor next
   :end-before: end cursor next

.. note::
   
   If you previously used the cursor to iterate some documents, the
   driver excludes those documents when you iterate again. 

Documents Only in the Cursor
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To attempt retrieving a document from your cursor, use the ``TryNext()``
method.

This method is unable to block the current goroutine. That means the
function returns a document if each of the following is true:

- A document is currently available
- No errors occurred
- The ``MongoClient`` didn't exhaust the cursor
- The context didn't expire

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/cursor.go
   :language: go
   :dedent:
   :start-after: begin cursor try next
   :end-before: end cursor try next

.. note::
   
   If you previously used the cursor to iterate some documents, the
   driver excludes those documents when you iterate again. 

.. _cursor-elements-golang:

Access Cursor Elements
----------------------

You can access a cursors elements before it's **exhausted**. A cursor is
exhausted when the ``MongoClient`` iterates through its results and
reaches its last element. Afterwards, the cursor won't respond to
functions to access its elements.

When :ref:`individually retrieving your cursors results
<individual-documents-golang>`, you can view each document as a ``BSON`` or
Go value.

BSON Document
~~~~~~~~~~~~~

To access the current document as raw ``BSON``, use the ``Current``
property.

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/cursor.go
   :language: go
   :dedent:
   :start-after: begin current
   :end-before: end current

Go Value Document
~~~~~~~~~~~~~~~~~

To access the current document as a Go value, use the ``Decode()``
function. 

This function unmarshals the current document into the :ref:`BSON
interface <bson-types>` you specify. It returns any errors from the
unmarshalling process without any modification.

.. code-block:: go

   var result bson.D
   if err := cursor.Decode(&result); err != nil {
      log.Fatal(err)
   }
   fmt.Println(result)

Other Elements
~~~~~~~~~~~~~~

You can also retrieve the following elements:

- `The number of documents remaining in the batch. <{+api+}/mongo#Cursor.RemainingBatchLength>`__
- `The cursor ID. <{+api+}/mongo#Cursor.ID>`__ 
- `The cursor errors encountered. <{+api+}/mongo#Cursor.Err>`__

.. important:: Retrieving the Cursor ID

   If you want to retrieve the cursor ID, include the option to set your
   batch size. The batch size needs to be a number less than or equal to
   the number of documents you expect to retrieve.
   
   .. code-block:: go
      
      opts := options.Find().SetBatchSize(<a number>)
      cursor, err := coll.Find(context.TODO(), bson.D{}, opts)
      if err != nil {
         panic(err)
      }

   If you omit this option, set the batch size to a number greater than
   the elements retrieved, or the ``MongoClient`` exhausts the cursor,
   the cursor ID is ``0``.

Close the Cursor
----------------

When your application no longer needs to use a cursor, close the cursor
with the ``Close()`` method. This method free's up your cursor's
consumption of resources in both the client application and the 
MongoDB server.

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/cursor.go
   :language: go
   :dedent:
   :start-after: begin close
   :end-before: end close

.. note:: 

   Close the cursor when you retrieve documents individually because
   those functions make a cursor :manual:`tailable
   </core/tailable-cursors/>`.

Additional Information
----------------------

For more information on the operations discussed in this guide, see the
following guides:

- :ref:`<retrieve-golang>`
- :ref:`<query_document_golang>`
- :ref:`<bson-golang>`
- :manual:`Tailable Cursors </core/tailable-cursors/>`

.. - Fundamentals > BSON page

API Documentation
~~~~~~~~~~~~~~~~~

For more information on any of the functions or types discussed in this
guide, see the following API Documentation:

- `Cursor <{+api+}/mongo#Cursor>`__
- `Cursor.All() <{+api+}/mongo#Cursor.All>`__
- `Cursor.Next() <{+api+}/mongo#Cursor.Next>`__
- `Cursor.TryNext() <{+api+}/mongo#Cursor.TryNext>`__
- `Cursor.Decode() <{+api+}/mongo#Cursor.Decode>`__
- `Cursor.RemainingBatchLength() <{+api+}/mongo#Cursor.RemainingBatchLength>`__
- `Cursor.ID() <{+api+}/mongo#Cursor.ID>`__
- `Cursor.Err() <{+api+}/mongo#Cursor.Err>`__
- `Cursor.Close() <{+api+}/mongo#Cursor.Close>`__
