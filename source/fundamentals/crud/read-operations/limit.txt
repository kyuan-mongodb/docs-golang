.. _golang-limit:

====================================
Limit the Number of Returned Results
====================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Overview
--------

In this guide, you can learn how to limit the number of documents
returned from a read operation.

Sample Data
~~~~~~~~~~~

To run the examples in this guide, load these documents into the
``tea.ratings`` collection with the following
snippet:

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/limit.go
   :language: go
   :dedent:
   :start-after: begin insertDocs
   :end-before: end insertDocs

.. include:: /includes/fundamentals/tea-sample-data-ending.rst

Limit
-----

To limit the number of documents returned from a query, pass the
number of documents you want returned to the ``SetLimit()`` method of
the read operation's options.

Specify the options as the last parameter to the following read
operation methods:

- ``Find()``
- ``CountDocuments()``
- ``gridfs.Bucket.Find()``

If the limit is ``0`` or exceeds the number of matched
documents, the method returns all the documents.  If the limit is a
negative number, the method behaves as if the limit was the absolute
value of the negative number and closes the cursor after retrieving
documents.

Example
~~~~~~~

The following example shows how to return two documents:

.. io-code-block::
   :copyable: true

   .. input::
      :language: go

      filter := bson.D{}
      opts := options.Find().SetLimit(2)

      cursor, err := coll.Find(context.TODO(), filter, opts)

      var results []bson.D
      if err = cursor.All(context.TODO(), &results); err != nil {
         panic(err)
      }
      for _, result := range results {
         fmt.Println(result)
      }

   .. output::
      :language: none
      :visible: false

      [{_id ObjectID("...")} {type Masala} {rating 10}]
      [{_id ObjectID("...")} {type Assam} {rating 5}]

Multiple Options
----------------

If you configure other options alongside the ``SetLimit()`` method,
the driver performs the limit last regardless of the order you list
the options.

Example
~~~~~~~

The following example performs the following actions in order using the
``Find()`` method:

- Sort the ``rating`` field in descending order
- Skip the first document
- Return the first two of the remaining documents

.. io-code-block::
   :copyable: true

   .. input::
      :language: go

      filter := bson.D{}
      opts := options.Find().SetSort(bson.D{{"rating", -1}}).SetLimit(2).SetSkip(1)

      cursor, err := coll.Find(context.TODO(), filter, opts)

      var results []bson.D
      if err = cursor.All(context.TODO(), &results); err != nil {
         panic(err)
      }
      for _, result := range results {
         fmt.Println(result)
      }

   .. output::
      :language: none
      :visible: false

      [{_id ObjectID("...")} {type Earl Grey} {rating 8}]
      [{_id ObjectID("...")} {type Oolong} {rating 7}]

.. tip::

   Using any of the following option declarations also produce the same result:

   .. code-block:: go
      :copyable: false

      multiOptions := options.Find().SetSort(bson.D{{"rating", -1}}).SetSkip(1).SetLimit(2)
      multiOptions := options.Find().SetLimit(2).SetSort(bson.D{{"rating", -1}}).SetSkip(1)
      multiOptions := options.Find().SetLimit(2).SetSkip(1).SetSort(bson.D{{"rating", -1}})
      multiOptions := options.Find().SetSkip(1).SetSort(bson.D{{"rating", -1}}).SetLimit(2)
      multiOptions := options.Find().SetSkip(1).SetLimit(2).SetSort(bson.D{{"rating", -1}})

.. _golang-limit-aggregation:

Aggregation
-----------

You can also include the :manual:`$limit </reference/operator/aggregation/limit/>`
stage to specify a limit in an aggregation pipeline.

Example
~~~~~~~

The following example shows how to return three documents:

.. io-code-block::
   :copyable: true

   .. input::
      :language: go

      limitStage := bson.D{{"$limit", 3}}

      cursor, err := coll.Aggregate(context.TODO(), mongo.Pipeline{limitStage})
      if err != nil {
         panic(err)
      }

      var results []bson.D
      if err = cursor.All(context.TODO(), &results); err != nil {
         panic(err)
      }
      for _, result := range results {
         fmt.Println(result)
      }

   .. output::
      :language: none
      :visible: false

      [{_id ObjectID("...")} {type Masala} {rating 10}]
      [{_id ObjectID("...")} {type Assam} {rating 5}]
      [{_id ObjectID("...")} {type Oolong} {rating 7}]

Additional Information
----------------------

To learn more about the operations mentioned, see the following
guides:

- :ref:`golang-query-document`
- :ref:`golang-retrieve`
- :ref:`golang-sort-results`
- :ref:`golang-skip`
- :ref:`golang-aggregation`

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about any of the methods or types discussed in this
guide, see the following API Documentation:

- `FindOptions.SetLimit() <{+api+}/mongo/options#FindOptions.SetLimit>`__
- `FindOptions.SetSort() <{+api+}/mongo/options#FindOptions.SetSort>`__
- `FindOptions.SetSkip() <{+api+}/mongo/options#FindOptions.SetSkip>`__
- `Aggregate() <{+api+}/mongo#Collection.Aggregate>`__
- `CountDocuments() <{+api+}/mongo#Collection.CountDocuments>`__
- `gridfs.Bucket.Find() <{+api+}/mongo/gridfs#Bucket.Find>`__
