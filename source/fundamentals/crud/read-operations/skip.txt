.. _golang-skip:

=====================
Skip Returned Results
=====================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Overview
--------

In this guide, you can learn how to skip a specified number of returned
results from read operations. 

Sample Data
~~~~~~~~~~~

To run the example in this guide, load these documents into the
``tea.ratings`` collection with the following
snippet:

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/skip.go
   :language: go
   :dedent:
   :start-after: begin insertDocs
   :end-before: end insertDocs

.. include:: /includes/fundamentals/tea-sample-data-ending.rst

Skip
----

To skip a specified number of returned results from a query, pass the
number of documents you want to skip to the ``SetSkip()`` method of
the read operation's options.

Specify the options as the last parameter to the following read
operation methods:

- ``Find()``
- ``FindOne()``
- ``CountDocuments()``
- ``gridfs.Bucket.Find()``

If the number of documents exceeds the number of matched documents for a
query, that query returns no documents.

.. tip::

    Passing in a negative number to the ``SetSkip()`` method results
    in a runtime error.

Documents return in a natural order, which can lead to skipping random
documents. To avoid this, use a ``SetSort()`` method before the
``SetSkip()`` method.

Example
~~~~~~~

The following example performs the following actions in order with the
``Find()`` method:

- An ascedning sort on the ``rating`` field
- Skips the first two documents

.. io-code-block::
   :copyable: true

   .. input::
      :language: go

      filter := bson.D{}
      opts := options.Find().SetSort(bson.D{{"rating", 1}}).SetSkip(2)

      cursor, err := coll.Find(context.TODO(), filter, opts)

      var results []bson.D
      if err = cursor.All(context.TODO(), &results); err != nil {
         panic(err)
      }
      for _, result := range results {
         fmt.Println(result)
      }

   .. output::
      :language: none
      :visible: false

      [{_id ObjectID("...")} {type Oolong} {rating 7}]
      [{_id ObjectID("...")} {type Earl Grey} {rating 8}]
      [{_id ObjectID("...")} {type Masala} {rating 10}]

.. _golang-skip-aggregation:

Aggregation
-----------

You can also include the :manual:`$skip </reference/operator/aggregation/skip/>`
stage to specify a skip in an aggregation pipeline.

Example
~~~~~~~

The following example performs the following actions in order with the
``Aggregate()`` method:

- A descending sort on the ``rating`` field
- Skips the first three documents

.. io-code-block::
   :copyable: true

   .. input::
      :language: go

      sortStage := bson.D{{"$sort", bson.D{{"rating", -1}}}}
      skipStage := bson.D{{"$skip", 3}}

      cursor, err := coll.Aggregate(context.TODO(), mongo.Pipeline{sortStage, skipStage})
      if err != nil {
         panic(err)
      }

      var results []bson.D
      if err = cursor.All(context.TODO(), &results); err != nil {
         panic(err)
      }
      for _, result := range results {
         fmt.Println(result)
      }

   .. output::
      :language: none
      :visible: false

      [{_id ObjectID("...")} {type Assam} {rating 5}]
      [{_id ObjectID("...")} {type English Breakfast} {rating 5}]

Additional Information
----------------------

To learn more about the operations mentioned, see the following
guides:

- :ref:`golang-query-document`
- :ref:`golang-retrieve`
- :ref:`golang-sort-results`
- :ref:`golang-aggregation`

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about any of the methods or types discussed in this
guide, see the following API Documentation:

- `Find() <{+api+}/mongo#Collection.Find>`__
- `FindOptions.SetSkip() <{+api+}/mongo/options#FindOptions.SetSkip>`__
- `Aggregate() <{+api+}/mongo#Collection.Aggregate>`__
- `CountDocuments() <{+api+}/mongo#Collection.CountDocuments>`__
- `gridfs.Bucket.Find() <{+api+}/mongo/gridfs#Bucket.Find>`__
