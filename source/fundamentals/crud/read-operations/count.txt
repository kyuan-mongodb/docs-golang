===============
Count Documents
===============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

Overview
--------

In this guide, you can learn how to get an :ref:`accurate
<accurate-count-go>` and :ref:`estimated <estimated-count-go>` count of
the number of documents in your collection.

Sample Data
~~~~~~~~~~~

To run the examples in this guide, load the sample data into the
``ratings`` collection of the ``tea`` database with the following
snippet:

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/countAndEstimate.go
   :language: go
   :dedent:
   :start-after: begin insert docs
   :end-before: end insert docs

.. include:: /includes/fundamentals/automatic-db-coll-creation.rst

Each document contains a rating for a type of tea that corresponds to
the ``type`` and ``rating`` fields.

.. _accurate-count-go:

Accurate Count
--------------

To count the number of documents that match your query filter, use the
``CountDocuments()`` function.

.. tip::

   If you pass an empty query filter, this function returns the total
   number of documents in the collection.

Modify Behavior
~~~~~~~~~~~~~~~

You can modify the behavior of ``CountDocuments()`` by passing in a
``CountOptions`` type. If you don't specify any options, the driver uses
its default values.

The ``CountOptions`` type allows you to configure options with the
following functions:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Function
     - Description

   * - ``SetCollation()``
     - | The type of language collation to use when sorting results.  
       | Default: ``nil``

   * - ``SetHint()`` 
     - | The index to use to scan for documents to count. 
       | Default: ``nil``

   * - ``SetLimit()`` 
     - | The maximum number of documents to count. 
       | Default: ``0`` 

   * - ``SetMaxTime()``
     - | The maximum amount of time that the query can run on the server.
       | Default: ``nil``

   * - ``SetSkip()`` 
     - | The number of documents to skip before counting.
       | Default: ``0``

Example 
```````

The following example counts the number of documents where the
``rating`` is less than ``6``:

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/countAndEstimate.go
   :language: go
   :dedent:
   :start-after: begin count documents
   :end-before: end count documents

After running this example, the output resembles the following:

.. code-block:: none
   :copyable: false

   Number of ratings less than six: 4

Aggregation
-----------

You can also include the :manual:`$count </reference/operator/aggregation/count/>`
stage to count the number of documents in an aggregation pipeline.

Example
~~~~~~~

The following example performs the following actions:

- Counts the number of documents where the ``rating`` is greater than ``5``
- Assigns the count to a field called ``total_documents``

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/countAndEstimate.go
   :language: go
   :dedent:
   :start-after: begin aggregate count
   :end-before: end aggregate count

After running this example, the output resembles the following:

.. code-block:: none
   :copyable: false

   [{total_documents 5}]

.. _estimated-count-go:

Estimated Count
---------------

To estimate the number of documents in your collection, use the
``EstimatedDocumentCount()`` function. 

.. note:: 

    The ``EstimatedDocumentCount()`` function is quicker than the
    ``CountDocuments()`` function because it uses the collection's
    metadata rather than scanning the entire collection. 

Modify Behavior
~~~~~~~~~~~~~~~

You can modify the behavior of ``EstimatedDocumentCount()`` by passing
in an ``EstimatedDocumentCountOptions`` type. If you don't specify any
options, the driver uses its default values.

The ``EstimatedDocumentCountOptions`` type allows you to configure
options with the following functions:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Function
     - Description

   * - ``SetMaxTime()``
     - | The maximum amount of time that the query can run on the server.
       | Default: ``nil``

Example 
```````

The following example estimates the number of documents in the
``ratings`` collection:

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/countAndEstimate.go
   :language: go
   :dedent:
   :start-after: begin est doc count
   :end-before: end est doc count

After running this example, the output resembles the following:

.. code-block:: none
   :copyable: false

   Estimated number of documents in the ratings collection: 9

Additional Information
----------------------

For more information on the operations mentioned, see the following
guides:

- :ref:`query_document_golang`
- :doc:`Skip Returned Results </fundamentals/crud/read-operations/skip>`
- :doc:`Limit the Number of Returned Results </fundamentals/crud/read-operations/limit>`

.. - :doc:`Aggregation </fundamentals/aggregation>` 
.. - :doc:`Collations </fundamentals/collations>`

API Documentation
~~~~~~~~~~~~~~~~~

For more information on any of the functions or types discussed in this
guide, see the following API Documentation:

- `CountDocuments() <{+api+}/mongo#Collection.CountDocuments>`__
- `CountOptions <{+api+}/mongo/options#CountOptions>`__
- `EstimatedDocumentCount() <{+api+}/mongo#Collection.EstimatedDocumentCount>`__
- `EstimatedDocumentCountOptions <{+api+}/mongo/options#EstimatedDocumentCountOptions>`__
