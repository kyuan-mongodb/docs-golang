==============
Retrieve Data
==============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to retrieve data from your MongoDB
collection using **read operations**.

Read operations allow you to do the following: 

- Retrieve a subset of documents from your collection by using a :ref:`find operation <retrieve-find>` 
- Perform transformations on retrieved documents from your collection using the :ref:`aggregate operation <retrieve-aggregate>`. 

Sample Data
~~~~~~~~~~~

To follow along with the examples on this page, run the following
snippet to load the documents into the ``ratings`` collection in the
``tea`` database:

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/retrieve.go
   :language: go
   :dedent:
   :start-after: begin insert docs
   :end-before: end insert docs

Each document contains the tea a person tried and their rating on a
scale of 10, which corresponds to the ``name`` and ``rating`` fields.

.. note::

   Each example truncates the ``ObjectID`` value since the driver
   generates them uniquely. 

.. _retrieve-find:

Find operations
---------------

Use a **find operation** to retrieve a subset of your existing data.
Find operations consist of the ``Find()`` and ``FindOne()`` functions.

Find All Documents
~~~~~~~~~~~~~~~~~~

The ``Find()`` function expects you to pass a ``Context`` type and a
filter. The function returns *all* documents that match the filter as a
``Cursor`` type. If you pass an empty filter, the function returns *all*
documents in the collection. 

.. To learn how to access data in a cursor, see the :doc:`Cursor
.. </fundamentals/crud/read-operations/cursor>` guide. 

Find One Document
~~~~~~~~~~~~~~~~~

The ``FindOne()`` function expects you to pass a ``Context`` type and a
filter. The function returns *the first document* that matches the
filter as a ``SingleResult`` type. If you pass an empty filter, the
function returns *a random document* in the collection.

To learn how to access data in a ``SingleResult`` see the :ref:`BSON
<bson-unmarshalling>` guide.

Example
```````

The following example passes a context and a filter to the ``Find()``
function, which matches documents where the ``ratings`` field falls
between ``5`` and ``10``:

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/retrieve.go
   :language: go
   :dedent:
   :start-after: begin find docs
   :end-before: end find docs

After running the preceding example, the output resembles the following:

.. code-block:: none
   :copyable: false

    //results truncated
   [{_id ObjectID("...")} {name Chai} {rating 7}]
   [{_id ObjectID("...")} {name Earl Grey} {rating 9}]

For a runnable ``find()`` example, see the :doc:`Find Multiple
Documents </usage-examples/find>` page. 

.. _retrieve-aggregate:

Aggregate Operation
-------------------

Use the **aggregate operation** to retrieve and transform a subset of
your existing data. The aggregate operation consists of the
``Aggregate()`` function.

Aggregation
~~~~~~~~~~~

The ``Aggregate()`` function expects you to pass a ``Context`` type and
an **aggregation pipeline**. An aggregation pipeline defines how to
transform data through stages such as specifying how to match documents,
rename fields, and group values. 

The function returns the resulting documents in a ``Cursor`` type. If
you omit the ``match`` stage, the pipeline proceeds using all documents
in the collection.

.. To learn how to access data in a cursor, see the :doc:`Cursor
.. </fundamentals/crud/read-operations/cursor>` guide. 

Example
```````

The following example passes a context and an aggregation pipeline that:

- Groups orders by names
- Calculates the average rating of each name

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/retrieve.go
   :language: go
   :dedent:
   :start-after: begin aggregate docs
   :end-before: end aggregate docs

After running the preceding example, the output resembles the following:

.. code-block:: none
   :copyable: false

   Chai has an average rating of 8.5
   Earl Grey has an average rating of 7

For more information on how to construct an aggregation pipeline, see
the MongoDB server manual page on :manual:`Aggregation
</core/aggregation-pipeline/>`. 

Additional Information
----------------------

For runnable examples of the find operations, see the :doc:`Find()
</usage-examples/find>` and :doc:`FindOne() </usage-examples/findOne>`
usage examples.

.. For more information on how to specify a query, see the :doc:`Specify
.. a Query </fundamentals/crud/query-document>` guide. 

.. For more information on aggregation, see the
.. :doc:`Aggregation </fundamentals/aggregation>` guide.

API Documentation
~~~~~~~~~~~~~~~~~

- `Find() <https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.7.0/mongo#Collection.Find>`__
- `Cursor <https://pkg.go.dev/go.mongodb.org/mongo-driver@v1.7.0/mongo#Cursor>`__
- `FindOne() <{+api+}/mongo#Collection.FindOne>`__
- `SingleResult <{+api+}/mongo#SingleResult>`__
- `Aggregate() <{+api+}/mongo#Collection.Aggregate>`__
