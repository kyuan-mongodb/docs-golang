.. _update-arrays-golang:

===========================
Update Arrays in a Document
===========================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to update array elements in a document.

To update elements in an array, perform the following actions:

- Provide an :ref:`update document <update-document>` that specifies the update.
- Specify which array elements to update.
- Perform the update using an update operation with these specifications.

Sample Data
~~~~~~~~~~~

To run the examples in this guide, load the sample data into the
``tea`` collection of the ``quantity`` database with the following
snippet:

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/updateArray.go
   :language: go
   :dedent:
   :start-after: begin insert docs
   :end-before: end insert docs

.. include:: /includes/fundamentals/automatic-db-coll-creation.rst

The following examples use the ``FindOneAndUpdate()`` function to
retrieve and update a document and to return the state of the document
after the update occurs. If you want to update multiple documents with
an array field, use the ``UpdateMany()`` function.

.. include:: /includes/fundamentals/truncated-id.rst

Specify Array Elements
----------------------

To specify which array elements to update, use a **positional
operator**. Positional operators can specify the :ref:`first <first-element-go>`,
:ref:`multiple <multiple-elements-go>`, or :ref:`all <all-elements-go>`
array elements to update.

To specify array elements with a positional operator, use **dot
notation**. Dot notation is a property access syntax for navigating
array elements and fields of an embedded document.

.. _first-element-go:

First Array Element
~~~~~~~~~~~~~~~~~~~

To update the first array element that matches your query filter, use
the positional ``$`` operator. The query filter must be for the array
field.

Example
```````

This example performs the following actions:

- Matches array elements in ``qty`` where the value is greater than ``10``.
- Decrements the first array value matched by ``5``.

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/updateArray.go
   :language: go
   :dedent:
   :start-after: begin positional
   :end-before: end positional

After running this example, the output resembles the following:

.. code-block:: none
   :copyable: false

   [{_id ObjectID(“…”)} {type Masala} {qty [10 12 18]}]

.. note::

   The query filter matches the values ``15`` and ``12``. Since ``15``
   is the first element matched, it is updated. If you want to update
   both matched values, see the :ref:`Multiple Array Elements section
   <multiple-elements-go>`.

.. _multiple-elements-go:

Multiple Array Elements
~~~~~~~~~~~~~~~~~~~~~~~

To update multiple array elements that match your query filter, use the
filtered positional ``$[<identifier>]`` operator. You must include an
array filter in your update operation to specify which array elements to
update.

The ``<identifier>`` is the name you use within your array filter. This
value must begin with a lowercase letter and only contain alphanumeric
characters.

Example
```````

This example performs the following actions:

- Creates an array filter with an identifier called ``smaller`` to match elements less than ``18``.
- Applies the array filter using the ``SetArrayFilters()`` function.
- Increments every matched element by ``7``.

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/updateArray.go
   :language: go
   :dedent:
   :start-after: begin filtered positional
   :end-before: end filtered positional

After running this example, the output resembles the following:

.. code-block:: none
   :copyable: false

   [{_id ObjectID("...")} {type Masala} {qty [22 19 18]}]

.. _all-elements-go:

All Array Elements
~~~~~~~~~~~~~~~~~~

To update all the array elements, use the all positional ``$[]`` operator.

.. note::

   If you specify a query filter for the array field, the positional
   ``$[]`` operator ignores the query filter and updates all the array
   elements.

Example
```````

This example multiplies every array element in ``qty`` by ``2``:

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/updateArray.go
   :language: go
   :dedent:
   :start-after: begin positional all
   :end-before: end positional all

After running this example, the output resembles the following:

.. code-block:: none
   :copyable: false

   [{_id ObjectID("...")} {type Masala} {qty [30 24 36]}]

Additional Information
----------------------

For more information on the operations discussed in this guide, see the
following guides:

- :ref:`<query_document_golang>`
- :ref:`<compound-operations-golang>`
- :ref:`<change_document_golang>`
- :manual:`Positional $ Operator </reference/operator/update/positional/>`
- :manual:`Positional $[] Operator </reference/operator/update/positional-all/>`
- :manual:`Positional $[\<identifier\>] Operator </reference/operator/update/positional-filtered/>`
- :manual:`Dot Notation </core/document/#std-label-document-dot-notation>`

API Documentation
~~~~~~~~~~~~~~~~~

For more information on any of the functions or types discussed in this
guide, see the following API Documentation:

- `FindOneAndUpdate() <{+api+}/mongo#Collection.FindOneAndUpdate>`__
- `FindOneAndUpdateOptions.SetReturnDocument() <{+api+}/mongo/options#FindOneAndUpdateOptions.SetReturnDocument>`__
- `FindOneAndUpdateOptions.SetArrayFilters() <{+api+}/mongo/options#FindOneAndUpdateOptions.SetArrayFilters>`__
- `UpdateMany() <{+api+}/mongo#Collection.UpdateMany>`__
