=================
Delete a Document
=================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _delete_guide_golang:

Overview
--------

In this guide, you can learn how to remove documents from your MongoDB
collections using delete operations.

Sample Data
~~~~~~~~~~~

To run the example in this guide, load these documents into the
``ratings`` collection of the ``tea`` database with the following
snippet:

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/delete.go
   :language: go
   :dedent:
   :start-after: begin insertDocs
   :end-before: end insertDocs

.. tip:: Non-existent Database and Collections

   The driver automatically creates the necessary database and/or collection
   when you perform a write operation against them if they don't already
   exist.
   
Each document contains a rating for a type of tea, which corresponds to
the ``type`` and ``rating`` fields.

Delete Operations
-----------------

Use **delete operations** to remove data from MongoDB. Delete operations
consist of the ``DeleteOne()`` and ``DeleteMany()`` functions.

The ``DeleteOne()`` function deletes *the first document* that
matches the filter. The ``DeleteMany()`` function deletes *all*
documents that match the filter.

.. tip::

   If one document matches your filter, the ``DeleteMany()`` function
   is equivalent to the ``DeleteOne`` function.

Request
~~~~~~~

Both functions expect you to pass a ``Context`` type and a non-nil query
filter. They both optionally take a ``DeleteOptions`` type as a third
parameter, which represents options you can use to configure the
delete operation.

The ``DeleteOptions`` type consists of the following functions:

.. list-table::
   :widths: 30 70
   :header-rows: 1

   * - Function
     - Description

   * - ``SetHint()`` 
     - | The index to use to scan for documents to delete. 
       | Default: ``Nil``

   * - ``SetCollation()``
     - | The type of language collation to use when sorting results.  
       | Default: ``Nil``

The following snippet specifies the delete operation to use the default
hint and to use the default collation: 

.. code-block:: go

   deleteOptions := options.Delete().SetHint(nil).SetCollation(nil)

Response
~~~~~~~~

Both functions return a ``DeleteResult`` type, which contains the number
of documents deleted. If there are no matches to your filter, no
document gets deleted and ``DeleteResult`` returns ``0``.

Example
```````

The following example passes a context and a filter to the
``DeleteMany()`` function, which matches documents where the ``rating``
is greater than ``8``:

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/delete.go
   :language: go
   :dedent:
   :start-after: begin deleteMany
   :end-before: end deleteMany

After running the preceding example, the output resembles the following:

.. code-block:: none
   :copyable: false

   Number of documents deleted: 2

.. tip::

   If the preceding example used the ``DeleteOne()`` function, the
   driver deletes the first document matched of the two.

Additional Information
----------------------

For runnable examples of the delete operations, see the following usage
examples:

- :doc:`Delete a Document </usage-examples/deleteOne>`
- :doc:`Delete Multiple Documents </usage-examples/deleteMany>`

For more information about how the driver uses Context, see our guide on
:doc:`Context </fundamentals/context>`.

.. For more information about specifying hints, see our guide on <TODO: Indexes>.
.. For more information about collations, see our guide on <TODO: Collations>.

API Documentation
~~~~~~~~~~~~~~~~~

For more information on any of the functions or types discussed in this
guide, see the following API Documentation:

- `DeleteOne() <{+api+}/mongo#Collection.DeleteOne>`__
- `DeleteMany() <{+api+}/mongo#Collection.DeleteMany>`__
- `DeleteOptions <{+api+}/options#DeleteOptions>`__
- `DeleteResult <{+api+}/mongo#DeleteResult>`__
