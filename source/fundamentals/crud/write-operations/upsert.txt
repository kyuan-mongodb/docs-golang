======================================
Insert or Update in a Single Operation
======================================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 1
   :class: singlecol

.. _upsert_golang:

Overview
--------

In this guide, you can learn how to specify an upsert.

Sample Data
~~~~~~~~~~~

To run the examples in this guide, load the sample data into the
``ratings`` collection of the ``tea`` database with the following
snippet:

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/upsert.go
   :language: go
   :dedent:
   :start-after: begin insert docs
   :end-before: end insert docs

.. include:: /includes/fundamentals/tea-sample-data-ending.rst

Upsert
------

Applications use insert and update operations to store and modify data.
Sometimes, you need to choose between an insert and update depending on
whether the document exists. MongoDB simplifies this decision for us
with an **upsert** option.

An upsert performs one of the following actions:

- Update documents that match your query filter
- Insert a document if there are no matches to your query filter

You can specify an upsert by passing ``true`` to the ``SetUpsert()``
function in the options of the following write operation functions:

- ``UpdateOne()``
- ``UpdateByID()``
- ``UpdateMany()``
- ``ReplaceOne()``
- ``FindOneAndUpdate()``
- ``FindOneAndReplace()``

.. tip::

   If you don't specify an upsert, no change occurs in the write
   operation when zero documents match your query filter. This is
   equivalent to passing ``false`` to the ``SetUpsert()`` function.

Example
~~~~~~~

The following example performs the following actions:

- Matches documents where the ``type`` is "Oolong"
- Updates the ``rating`` of the matched document to ``8``
- Inserts this document if there are no matches to your query filter

.. literalinclude:: /includes/fundamentals/code-snippets/CRUD/upsert.go
   :language: go
   :dedent:
   :start-after: begin upsert
   :end-before: end upsert

The expected output of this example is as follows:

.. code-block:: none
   :copyable: false

   Number of documents upserted: 1

Additional Information
----------------------

For information on how to update or replace documents, see the guide on
:doc:`Changing a Document </fundamentals/crud/write-operations/change-a-document>`.

API Documentation
~~~~~~~~~~~~~~~~~

For more information on any of the functions or types mentioned in this
guide, see the following API Documentation:

- `UpdateOne() <{+api+}/mongo#Collection.UpdateOne>`__
- `UpdateByID() <{+api+}/mongo#Collection.UpdateByID>`__
- `UpdateMany() <{+api+}/mongo#Collection.UpdateMany>`__
- `ReplaceOne() <{+api+}/mongo#Collection.ReplaceOne>`__
- `FindOneAndUpdate() <{+api+}/mongo#Collection.FindOneAndUpdate>`__
- `FindOneAndReplace() <{+api+}/mongo#Collection.FindOneAndReplace>`__
- `UpdateOptions.SetUpsert() <{+api+}/mongo/options#UpdateOptions.SetUpsert>`__
- `ReplaceOptions.SetUpsert() <{+api+}/mongo/options#ReplaceOptions.SetUpsert>`__
- `UpdateResult <{+api+}/mongo#UpdateResult>`__
