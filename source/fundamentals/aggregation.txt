.. _golang-aggregation:

===========
Aggregation
===========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

In this guide, you can learn how to use **aggregation operations** in the
{+driver-long+}.

Aggregation operations process data in your MongoDB collections based on
your specifications in the **aggregation pipeline**. An
:manual:`aggregation pipeline </core/aggregation-pipeline/>` consists of
one or more **stages**. Each :manual:`stage
</meta/aggregation-quick-reference/#stages>` performs an operation based
on its :manual:`expression operators </reference/operator/aggregation/>`. 
After the driver executes the aggregation pipeline, it returns an
aggregated result.

Analogy
~~~~~~~

Aggregation operations operate similarly to a car factory. Car factories
have an assembly line. The assembly lines have assembly stations with
specialized tools to peform a specific task. To build a car, you send
raw parts to the factory. Then, the assembly line transforms and
assembles the parts into a car.

The assembly line resembles the **aggregation pipeline**, the assembly
stations in the assembly line resemble the **aggregation stages**, the
specialized tools represent the **expression operators**, and the
finished product resembles the **aggregated result**. 

Compare Operations
------------------

The following table lists the tasks you can perform with find and aggregation operations.

.. list-table::
   :header-rows: 1
   :widths: 50 50

   * - Find Operations
     - Aggregation Operations

   * - | Select *what* documents to return
       | Select *which* fields to return
       | Sort the results
       | Limit the results
       | Count the results
     - | Perform *all* find operations
       | Rename fields
       | Calculate fields
       | Summarize data
       | Group values

Limitations
-----------

Aggregation operations have limitations. When performing agregation
operations, keep the following in mind:

- Returned documents must not violate the :manual:`BSON document size
  limit </reference/limits/#BSON-Document-Size>` of 16 megabytes.
- Pipeline stages have a memory limit of 100 megabytes by default. If
  required, you may exceed this limit by using the `allowDiskUse
  <{+api+}/mongo/options#AggregateOptions.SetAllowDiskUse>`__
  method.
- The :manual:`$graphLookup
  </reference/operator/aggregation/graphLookup/>` stage
  has a strict memory limit of 100 megabytes and ignores
  ``allowDiskUse``.

To learn more, see :manual:`Aggregation Pipeline Limits
</core/aggregation-pipeline-limits/>`. 

Examples
--------

To run the examples in this section, load the sample data into the
``tea.ratings`` collection with the following snippet:

.. literalinclude:: /includes/fundamentals/code-snippets/aggregation.go
   :start-after: begin insert docs
   :end-before: end insert docs
   :language: go
   :dedent:

Average Rating
~~~~~~~~~~~~~~

The following example calculates and displays the average rating of each
tea.

The aggregation pipleline uses the ``$group`` stage to group the
documents by the ``type`` field and calculates the average using the
``$avg`` expression operator.

.. io-code-block::
   :copyable: true

   .. input::
      :language: go

      // create the stage
			groupStage := bson.D{
					{"$group", bson.D{
							{"_id", "$type"},
							{"average", bson.D{
									{"$avg", "$rating"},
					}},
			}}}

			// pass the stage into a pipeline
			// pass the pipeline as the second paramter in the Aggregate() method
			cursor, err := coll.Aggregate(context.TODO(), mongo.Pipeline{groupStage})
			if err != nil {
					panic(err)
			}

			// display the results
			var results []bson.M
			if err = cursor.All(context.TODO(), &results); err != nil {
					panic(err)
      }
			for _, result := range results {
					fmt.Printf("%v has an average rating of %v \n", result["_id"], result["average"])
			}

   .. output::
      :language: go

      Masala has an average rating of 8.363636363636363 
      Earl Grey has an average rating of 7.375 

Amount of Documents
~~~~~~~~~~~~~~~~~~~

The following example calculates and displays the amount of documents
with ratings over 8 for each tea.

The aggregation pipleline uses the ``$match`` stage to match documents
with a ``rating`` greater than 8. Then, the pipeline uses the ``$group``
stage to group the documents by the ``type`` field and counts the
documents using the ``$sum`` expression operator.

.. io-code-block::
   :copyable: true

   .. input::
      :language: go

			// create the stages
			matchStage := bson.D{{"$match", bson.D{
					{"rating", bson.D{
							{"$gt", 8}},
          }},
			}}
			groupStage := bson.D{{"$group", bson.D{
					{"_id", "$type"},
					{"count", bson.D{
						{"$sum", 1},
					}},
			}}}

			// pass the stage into a pipeline
			// pass the pipeline as the second paramter in the Aggregate() method
			cursor, err := coll.Aggregate(context.TODO(), mongo.Pipeline{matchStage, groupStage})
			if err != nil {
					panic(err)
			}

			// display the results
			var results []bson.M
			if err = cursor.All(context.TODO(), &results); err != nil {
					panic(err)
			}
			for _, result := range results {
					fmt.Printf("%v Count: %v \n", result["_id"], result["count"])
			}

   .. output::
      :language: go

      Masala Count: 7 
      Earl Grey Count: 3 

Additional Information
----------------------

To learn more about the terms mentioned, see the following
guides:

- :manual:`Expression Operators </reference/operator/aggregation/>`
- :manual:`Aggregation Pipeline </core/aggregation-pipeline/>`
- :manual:`Aggregation Stages </meta/aggregation-quick-reference/#stages>`
- :manual:`Operator Expressions </meta/aggregation-quick-reference/#operator-expressions>`

To view more aggregation examples, see the following guides:

- :ref:`Count <golang-count-aggregation>`
- :ref:`Limit <golang-limit-aggregation>`
- :ref:`Skip <golang-skip-aggregation>`
- :ref:`Text <golang-search-text-aggregation>`

To learn more about the ``Aggregate()`` method and its behavior, see
:ref:`Retrieve Data <golang-retrieve-aggregation>`

API Documentation
~~~~~~~~~~~~~~~~~

To learn more about any of the methods or types discussed in this
guide, see the following API Documentation:

- `Aggregate() <{+api+}/mongo#Collection.Aggregate>`__
- `AggregateOptions <{+api+}/mongo/options#AggregateOptions>`__

